"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _canvas=require("@napi-rs/canvas");const _nodefs=require("node:fs");const _=require("../..");const _default=new _forgescript.NativeFunction({name:"$saveCanvas",aliases:["$downloadCanvas","$canvasSave","$canvasDownload"],description:"Saves a canvas to a file.",version:"1.1.0",brackets:true,unwrap:true,args:[{name:"canvas",description:"Name of the canvas.",type:_forgescript.ArgType.String,required:false,rest:false},{name:"path",description:"Path to a directory. (including the canvas file name and extension)",type:_forgescript.ArgType.String,required:true,rest:false},{name:"format",description:"The image format.",type:_forgescript.ArgType.Enum,enum:_.ImageFormat,required:false,rest:false}],async execute(ctx,[name,path,f]){const canvas=name?ctx.canvasManager?.get(name):ctx.canvasManager?.lastCurrent;if(!canvas)return this.customError(_.FCError.NoCanvas);const format=f!==null?"image/"+(typeof f==="number"?_.ImageFormat[f]:f):"image/png";if(!path)return this.customError(_.FCError.NoPath);if(path.startsWith("images://")){if(!ctx.imageManager)ctx.imageManager=new _.ImageManager;ctx.imageManager.set(path.slice(9),await (0,_canvas.loadImage)(canvas.buffer(format)))}else(0,_nodefs.writeFileSync)(path,canvas.buffer(format));return this.success()}});