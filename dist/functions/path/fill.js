"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _=require("../..");const _default=new _forgescript.NativeFunction({name:"$fill",aliases:["$pathFill","$fillPath"],description:"Fills the current path.",version:"1.0.0",brackets:true,unwrap:true,args:[{name:"canvas",description:"Name of the canvas.",type:_forgescript.ArgType.String,required:false,rest:false},{name:"style",description:"The style. (color/gradient/pattern)",type:_forgescript.ArgType.String,required:true,rest:false},{name:"fillRule",description:"The fill rule",type:_forgescript.ArgType.Enum,enum:_.FillRule,required:false,rest:false}],async execute(ctx,[name,style,rule]){const canvas=name?ctx.canvasManager?.get(name):ctx.canvasManager?.lastCurrent;if(!canvas)return this.customError(_.FCError.NoCanvas);const oldstyle=canvas.ctx.fillStyle,s=await _.CanvasUtil.resolveStyle(this,ctx,canvas,style);if(s instanceof _forgescript.Return)return s;canvas.ctx.fillStyle=s;canvas.ctx.fill(typeof rule==="number"?_.FillRule[rule]:rule);canvas.ctx.fillStyle=oldstyle;return this.success()}});