"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _gifsx=require("@gifsx/gifsx");const _=require("../..");const _default=new _forgescript.NativeFunction({name:"$newNeuQuant",aliases:["$createNeuQuant","$NeuQuant"],description:"Creates a new NeuQuant instance.",version:"1.2.1",brackets:true,unwrap:true,args:[{name:"name",description:"Name of the new NeuQuant instance.",type:_forgescript.ArgType.String,required:true,rest:false},{name:"sample",description:"Sample factor.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"maxColors",description:"Maximum number of colors.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"pixels",description:"The pixels.",type:_forgescript.ArgType.Json,required:true,rest:false}],execute(ctx,[name,sample,maxColors,pixels]){if(!ctx.neuquantManager||!(ctx.neuquantManager instanceof _.NeuQuantManager))ctx.neuquantManager=new _.NeuQuantManager;ctx.neuquantManager.set(name,new _gifsx.NeuQuant(sample,maxColors,Uint8Array.from(pixels)));return this.success()}});