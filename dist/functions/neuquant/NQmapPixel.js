"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _classes=require("../../classes");const _default=new _forgescript.NativeFunction({name:"$NQmapPixel",aliases:["$mapPixel"],description:"Maps the rgba-pixel in-place to the best-matching color in the color map.",version:"1.2.1",brackets:true,unwrap:true,args:[{name:"name",description:"Name of the NeuQuant instance.",type:_forgescript.ArgType.String,required:true,rest:false},{name:"r",description:"The red value.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"g",description:"The green value.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"b",description:"The blue value.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"a",description:"The alpha value.",type:_forgescript.ArgType.Number,required:true,rest:false}],execute(ctx,[name,r,g,b,a]){const nq=ctx.neuquantManager?.get(name);if(!nq)return this.customError(_classes.FCError.NoNeuQuant);nq.mapPixel(Uint8Array.from([r,g,b,a]));return this.success()}});