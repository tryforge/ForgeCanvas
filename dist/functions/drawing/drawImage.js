"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _classes=require("../../classes");const _default=new _forgescript.NativeFunction({name:"$drawImage",aliases:["$placeImage"],description:"Draws an image on a canvas.",version:"1.0.0",brackets:true,unwrap:true,args:[{name:"canvas",description:"Name of the canvas.",type:_forgescript.ArgType.String,required:false,rest:false},{name:"src",description:"The image source.",type:_forgescript.ArgType.String,required:true,rest:false},{name:"x",description:"The image start X coordinate.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"y",description:"The image start Y coordinate.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"width",description:"The image width.",type:_forgescript.ArgType.Number,required:false,rest:false},{name:"height",description:"The image height.",type:_forgescript.ArgType.Number,required:false,rest:false},{name:"radius",description:"The image radius.",type:_forgescript.ArgType.Number,required:false,rest:true}],async execute(ctx,[name,src,x,y,width,height,radius]){const canvas=name?ctx.canvasManager?.get(name):ctx.canvasManager?.lastCurrent;if(!canvas)return this.customError(_classes.FCError.NoCanvas);const img=await _classes.CanvasUtil.resolveImage(this,ctx,src);if(img instanceof _forgescript.Return)return img;console.log(x,y,typeof width,height);await canvas.drawImage(img,x,y,width,height,radius.length===1?radius[0]:radius);return this.success()}});