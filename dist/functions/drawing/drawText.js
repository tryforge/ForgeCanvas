"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _=require("../..");const _default=new _forgescript.NativeFunction({name:"$drawText",aliases:["$placeText","$text","$writeText","$addText"],description:"Draws a filled/stroked text on a canvas.",version:"1.0.0",brackets:true,unwrap:true,args:[{name:"canvas",description:"Name of the canvas.",type:_forgescript.ArgType.String,required:false,rest:false},{name:"type",description:"The text type.",type:_forgescript.ArgType.Enum,enum:_.FillOrStroke,required:true,rest:false},{name:"text",description:"The text to draw.",type:_forgescript.ArgType.String,required:true,rest:false},{name:"font",description:"The text font. ({size}px {font name})",type:_forgescript.ArgType.String,check:i=>_.CanvasUtil.isValidFont(i),required:true,rest:false},{name:"style",description:"The style. (color/gradient/pattern)",type:_forgescript.ArgType.String,required:true,rest:false},{name:"x",description:"The text start X coordinate.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"y",description:"The text start Y coordinate.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"maxWidth",description:"Maximum font width.",type:_forgescript.ArgType.Number,required:false,rest:false},{name:"multiline",description:"Indicates if the text should be drawn in multiple lines if it exceeds the maximum width.",type:_forgescript.ArgType.Boolean,required:false,rest:false},{name:"wrap",description:"Wraps the text if true.",type:_forgescript.ArgType.Boolean,required:false,rest:false},{name:"lineOffset",description:"The text lines offset.",type:_forgescript.ArgType.Number,required:false,rest:false}],async execute(ctx,[name,t,text,font,style,x,y,maxWidth,multiline,wrap,lineOffset]){const canvas=name?ctx.canvasManager?.get(name):ctx.canvasManager?.lastCurrent;if(!canvas)return this.customError(_.FCError.NoCanvas);const styleT=t===_.FillOrStroke.fill?"fillStyle":"strokeStyle",oldstyle=canvas.ctx[styleT],s=await _.CanvasUtil.resolveStyle(this,ctx,canvas,style);if(s instanceof _forgescript.Return)return s;canvas.ctx[styleT]=s;canvas.text(t,text,x,y,font,maxWidth,multiline,wrap,lineOffset);canvas.ctx[styleT]=oldstyle;return this.success()}});