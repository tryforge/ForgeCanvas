"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _gifsx=require("@gifsx/gifsx");const _=require("../..");const _default=new _forgescript.NativeFunction({name:"$addFrame",description:"Adds a frame to the GIF.",version:"1.2.0",brackets:true,unwrap:true,args:[{name:"gif",description:"Name of the GIF.",type:_forgescript.ArgType.String,required:false,rest:false},{name:"frame",description:"Frame source.",type:_forgescript.ArgType.String,required:true,rest:false},{name:"options",description:"Frame options.",type:_forgescript.ArgType.Json,required:false,rest:false},{name:"speed",description:"Frame rgb quantization speed.",type:_forgescript.ArgType.Number,check:x=>x>=1&&x<=30,required:false,rest:false}],async execute(ctx,[name,frame,options,speed]){const gif=name?ctx.gifManager?.getEncoder(name):ctx.gifManager?.lastCurrentEncoder;if(!gif)return this.customError(_.FCError.NoEncoder);const f=await _.CanvasUtil.resolveFrame(this,ctx,frame,speed);if(f instanceof _forgescript.Return)return f;if(options){if(typeof options.delay==="number")f.delay=options.delay;if(options.dispose&&_gifsx.DisposalMethod[options.dispose])f.dispose=options.dispose;if(typeof options.transparent==="number")f.transparent=options.transparent;if(typeof options.needsUserInput==="boolean")f.needsUserInput=options.needsUserInput;if(typeof options.top==="number")f.top=options.top;if(typeof options.left==="number")f.left=options.left;if(typeof options.interlaced==="boolean")f.interlaced=options.interlaced;if(Array.isArray(options.palette))f.setPalette(Uint8Array.from(options.palette))}gif.addFrame(f);return this.success()}});