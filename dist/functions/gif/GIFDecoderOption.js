"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _=require("../..");const _default=new _forgescript.NativeFunction({name:"$GIFDecoderOption",aliases:["$decoderOption","$GIFDecoderProperty","$decoderProperty"],description:"Sets or returns a GIF Frame option.",version:"1.2.0",brackets:true,unwrap:true,args:[{name:"gif",description:"Name of the Decoder.",type:_forgescript.ArgType.String,required:true,rest:false},{name:"option",description:"Option to get.",type:_forgescript.ArgType.Enum,enum:_.DecoderOption,required:true,rest:false}],execute(ctx,[name,option]){const gif=ctx.gifManager?.getDecoder(name);if(!gif)return this.customError(_.FCError.NoDecoder);const opt=gif?.[typeof option==="number"?_.DecoderOption[option]:option];if(opt instanceof Uint8ClampedArray||opt instanceof ArrayBuffer){if(opt instanceof Uint8ClampedArray)return this.success(`[${Array.from(opt).join(", ")}]`);return this.success(`[${Array.from(new Uint8Array(opt)).join(", ")}]`)}return this.success(opt)}});