"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _classes=require("../../classes");const _gifsx=require("@gifsx/gifsx");const _default=new _forgescript.NativeFunction({name:"$newGIFEncoder",aliases:["$createGIFEncoder","$GIFEncoder","$createEncoder","$newEncoder"],description:"Creates a new GIF Encoder.",version:"1.2.0",brackets:true,unwrap:false,args:[{name:"gif",description:"Name of the new GIF Encoder.",type:_forgescript.ArgType.String,required:true,rest:false},{name:"width",description:"Width of the new canvas.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"height",description:"Height of the new canvas.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"palette",description:"Palette for the GIF.",type:_forgescript.ArgType.Json,required:false,rest:false},{name:"functions",description:"Functions.",type:_forgescript.ArgType.Unknown,required:false,rest:true}],async execute(ctx){if(!this.data.fields)this.data.fields=[];if(!ctx.gifManager||!(ctx.gifManager instanceof _classes.GIFManager))ctx.gifManager=new _classes.GIFManager;const options=await this["resolveMultipleArgs"](ctx,0,1,2,3);let[name,width,height,palette]=options.args;const r=options.return;if(!r?.success)return r;try{palette=JSON.parse(palette)}catch(_){}ctx.gifManager.currentEncoder.push(new _gifsx.Encoder(width,height,Array.isArray(palette)?Uint8Array.from(palette):undefined));for(let i=4;i<this.data.fields.length;i++){const r=await this["resolveCode"](ctx,this.data.fields[i]);if(!r?.success)return r}ctx.gifManager.setEncoder(name,ctx.gifManager.lastCurrentEncoder);ctx.gifManager.currentEncoder=ctx.gifManager.currentEncoder.slice(0,ctx.gifManager.currentEncoder.length-1);return this.success()}});