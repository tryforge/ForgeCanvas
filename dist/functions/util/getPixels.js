"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _=require("../..");const _default=new _forgescript.NativeFunction({name:"$getPixels",aliases:["$getImageData"],description:"Returns an array of pixels. (their colors)",version:"1.0.0",brackets:true,unwrap:true,args:[{name:"canvas",description:"Name of the canvas.",type:_forgescript.ArgType.String,required:false,rest:false},{name:"x",description:"The X coordinate of the top-left corner of the rectangle from which the pixel colors will be extracted.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"y",description:"The Y coordinate of the top-left corner of the rectangle from which the pixel colors will be extracted.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"width",description:"The width of the rectangle from which the pixel colors will be extracted.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"height",description:"The height of the rectangle from which the pixel colors will be extracted.",type:_forgescript.ArgType.Number,required:true,rest:false},{name:"type",description:"The pixels (image data) content type.",type:_forgescript.ArgType.Enum,enum:_.ColorDataType,required:false,rest:false}],execute(ctx,[name,x,y,w,h,t]){const canvas=name?ctx.canvasManager?.get(name):ctx.canvasManager?.lastCurrent;if(!canvas)return this.customError(_.FCError.NoCanvas);return this.success(`[${canvas.getPixels(x,y,w,h,t).map(x=>typeof x==="string"?`"${x}"`:x).join(", ")}]`)}});