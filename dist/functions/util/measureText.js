"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _=require("../..");const _default=new _forgescript.NativeFunction({name:"$measureText",description:"Measures text.",version:"1.0.0",brackets:false,unwrap:true,args:[{name:"canvas",description:"Name of the canvas.",type:_forgescript.ArgType.String,required:false,rest:false},{name:"text",description:"The text to measure.",type:_forgescript.ArgType.String,required:true,rest:false},{name:"font",description:"The font.",type:_forgescript.ArgType.String,required:true,rest:false},{name:"property",description:"The result's property to return.",type:_forgescript.ArgType.Enum,enum:_.MeasureTextProperty,required:false,rest:false}],async execute(ctx,[name,text,font,property]){const canvas=name?ctx.canvasManager?.get(name):ctx.canvasManager?.lastCurrent;if(!canvas)return this.customError(_.FCError.NoCanvas);const res=canvas.measureText(text,font);return this.success(property!==null?res[_.MeasureTextProperty[typeof property==="string"?_.MeasureTextProperty[property]:property]]:JSON.stringify(res))}});