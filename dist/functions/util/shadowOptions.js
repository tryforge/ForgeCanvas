"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _classes=require("../../classes");const _default=new _forgescript.NativeFunction({name:"$shadowOptions",aliases:["$shadowConfig"],description:"Sets or returns the shadow options in a canvas.",version:"1.1.0",brackets:true,unwrap:true,args:[{name:"canvas",description:"Name of the canvas.",type:_forgescript.ArgType.String,required:false,rest:false},{name:"options",description:"The options. (color, blur, offsetX, offsetY)",type:_forgescript.ArgType.Json,required:true,rest:false}],execute(ctx,[name,options]){const canvas=(name?ctx.canvasManager?.get(name):ctx.canvasManager?.lastCurrent)?.ctx;if(!canvas)return this.customError(_classes.FCError.NoCanvas);if(typeof options==="string")options=JSON.parse(options);const shadowOptions={color:"shadowColor",blur:"shadowBlur",offsetX:"shadowOffsetX",offsetY:"shadowOffsetY"};const res=[];if(!Array.isArray(options))for(const option in options)canvas[shadowOptions?.[option]]=options[option];else for(const option in options)res.push(canvas[shadowOptions[option]]);return this.success(Array.isArray(options)?JSON.stringify(res):undefined)}});