"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _gifsx=require("@gifsx/gifsx");const _default=new _forgescript.NativeFunction({name:"$indexedToRgba",description:"Converts indexed pixels to RGBA",version:"1.2.1",brackets:true,unwrap:true,args:[{name:"palette",description:"The palette to use for the conversion.",type:_forgescript.ArgType.Json,required:true,rest:false},{name:"transparent",description:"The index of the transparent color in the palette.",type:_forgescript.ArgType.Number,required:false,rest:false},{name:"pixels",description:"The pixels to convert into RGBA.",type:_forgescript.ArgType.Number,check:x=>x>=0&&x<=255,required:true,rest:true}],execute(_,[palette,transparent,pixels]){try{const res=(0,_gifsx.indexedToRgba)(Uint8Array.from(pixels),Uint8Array.from(palette),transparent);return this.success(`[${res.join(", ")}]`)}catch(e){return this.customError(e.toString())}}});