"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _canvas=require("@napi-rs/canvas");const _=require("../..");const _default=new _forgescript.NativeFunction({name:"$imageSize",aliases:["$imgSize","$imageDimensions"],description:"Returns image's size.",version:"1.1.0",brackets:true,unwrap:true,args:[{name:"path",description:"The image path.",type:_forgescript.ArgType.String,required:true,rest:false},{name:"property",description:"The size property to return.",type:_forgescript.ArgType.Enum,enum:_.WidthOrHeight,required:false,rest:false}],async execute(ctx,[path,property]){let image;if(path.startsWith("images://")){path=path.slice(9);let manager=ctx.imageManager;if(path.startsWith("preload://")){path=path.slice(10);manager=ctx.client.preloadImages}image=manager?.get(path)}else image=await (0,_canvas.loadImage)(path);if(!image)return this.customError(_.FCError.ImageFail);return this.success(property!==null?image[_.WidthOrHeight[typeof property==="string"?_.WidthOrHeight[property]:property]]:JSON.stringify({width:image.width,height:image.height}))}});