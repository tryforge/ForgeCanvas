"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"default",{enumerable:true,get:function(){return _default}});const _forgescript=require("@tryforge/forgescript");const _=require("../..");const _default=new _forgescript.NativeFunction({name:"$filter",description:"Use filters in your canvas.",version:"1.0.0",brackets:true,unwrap:true,args:[{name:"canvas",description:"Name of the canvas.",type:_forgescript.ArgType.String,required:false,rest:false},{name:"method",description:"The method.",type:_forgescript.ArgType.Enum,enum:_.FilterMethod,required:true,rest:false},{name:"filter",description:"Name of the filter.",type:_forgescript.ArgType.Enum,enum:_.Filters,required:false,rest:false},{name:"value",description:"Filter's value.",type:_forgescript.ArgType.String,required:false,rest:false}],execute(ctx,[name,method,filter,value]){const canvas=name?ctx.canvasManager?.get(name):ctx.canvasManager?.lastCurrent;if(!canvas)return this.customError(_.FCError.NoCanvas);const res=canvas.filter(method,filter,value);return this.success(typeof res==="object"?JSON.stringify(res):res)}});