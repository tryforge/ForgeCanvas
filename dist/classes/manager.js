"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _export(target,all){for(var name in all)Object.defineProperty(target,name,{enumerable:true,get:Object.getOwnPropertyDescriptor(all,name).get})}_export(exports,{get CanvasManager(){return CanvasManager},get GIFManager(){return GIFManager},get GradientManager(){return GradientManager},get ImageManager(){return ImageManager},get NeuQuantManager(){return NeuQuantManager}});const _canvas=require("@napi-rs/canvas");const _builder=require("./builder");const _=require("../");let Manager=class Manager{constructor(){this.map=new Map}get(name){return this.map.get(name)}remove(name){this.map.delete(name)}};let CanvasManager=class CanvasManager extends Manager{constructor(){super();this.current=[]}get lastCurrent(){return this.current[this.current.length-1]}set(name,a,b){if(typeof a==="number")this.map.set(name,new _builder.CanvasBuilder(a,b??a));else this.map.set(name,a)}};let GradientManager=class GradientManager extends Manager{constructor(){super();this.ctx=(0,_canvas.createCanvas)(1,1).getContext("2d");this.stops=[]}set(name,a,...options){if(_.GradientType?.[a])this.map.set(name,a===_.GradientType.radial?this.ctx.createRadialGradient(...options):a===_.GradientType.conic?this.ctx.createConicGradient(...options):this.ctx.createLinearGradient(...options));else this.map.set(name,a)}};let ImageManager=class ImageManager extends Manager{set(name,image){this.map.set(name,image)}};let GIFManager=class GIFManager{constructor(){this.encoders=new Map;this.decoders=new Map;this.decodeOptions=new Map;this.frames=new Map;this.currentOptions=null;this.currentEncoder=[]}get lastCurrentEncoder(){return this.currentEncoder[this.currentEncoder.length-1]}setEncoder(name,encoder){this.encoders.set(name,encoder)}setDecoder(name,decoder){this.decoders.set(name,decoder)}setDecodeOptions(name,options){this.decodeOptions.set(name,options)}setFrame(name,frame){this.frames.set(name,frame)}getEncoder(name){return this.encoders.get(name)}getDecoder(name){return this.decoders.get(name)}getDecodeOptions(name){return this.decodeOptions.get(name)}getFrame(name){return this.frames.get(name)}removeEncoder(name){this.encoders.delete(name)}removeDecoder(name){this.decoders.delete(name)}removeDecodeOptions(name){this.decodeOptions.delete(name)}removeFrame(name){this.frames.delete(name)}};let NeuQuantManager=class NeuQuantManager extends Manager{set(name,nq){this.map.set(name,nq)}};